// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mc2.CrudTest.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Customer Manager")]
    public partial class CustomerManagerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CustomerManager.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Customer Manager", "As a an operator I wish to be able to Create, Update, Delete customers and list a" +
                    "ll customers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create, Update, Delete customers and list all customers")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void CreateUpdateDeleteCustomersAndListAllCustomers()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create, Update, Delete customers and list all customers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table15.AddRow(new string[] {
                            "Ahmad",
                            "Aghamohammadi",
                            "ahmad.aghamohammadi@gmail.com",
                            "123",
                            "1990-08-23",
                            "NL91ABNA0417164300"});
#line 7
    testRunner.Given("a new customer with the following details", ((string)(null)), table15, "Given ");
#line hidden
#line 10
    testRunner.When("the operator attempts to create the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    testRunner.Then("an error message should be shown indicating \"Invalid phone number\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table16.AddRow(new string[] {
                            "Ahmad",
                            "Aghamohammadi",
                            "ahmad.aghamohammadi@gmail.com",
                            "+12124567890",
                            "1990-08-23",
                            "132164555645465"});
#line 13
    testRunner.Given("a new customer with the following details", ((string)(null)), table16, "Given ");
#line hidden
#line 16
    testRunner.When("the operator attempts to create the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
    testRunner.Then("an error message should be shown indicating \"Invalid Bank account format\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table17.AddRow(new string[] {
                            "Ahmad",
                            "Aghamohammadi",
                            "ahmad.aghamohammadi",
                            "+12124567890",
                            "1990-08-23",
                            "NL91ABNA0417164300"});
#line 19
    testRunner.Given("a new customer with the following details", ((string)(null)), table17, "Given ");
#line hidden
#line 22
    testRunner.When("the operator attempts to create the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
    testRunner.Then("an error message should be shown indicating \"Invalid email\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table18.AddRow(new string[] {
                            "51a9d76c-b28e-4659-aad5-965515e15e16",
                            "Ahmad",
                            "Aghamohammadi",
                            "ahmad.aghamohammadi@gmail.com",
                            "+12124567890",
                            "1990-08-23",
                            "NL91ABNA0417164300"});
#line 24
    testRunner.Given("a new customer with the following details", ((string)(null)), table18, "Given ");
#line hidden
#line 27
    testRunner.When("the operator attempts to create the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
    testRunner.Then("the customer should be added successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table19.AddRow(new string[] {
                            "Ahmad2",
                            "Aghamohammadi2",
                            "ahmad.aghamohammadi2@gmail.com",
                            "+12124567892",
                            "1990-08-24",
                            "NL91ABNA0417164300"});
#line 29
    testRunner.Given("a new customer with the following details", ((string)(null)), table19, "Given ");
#line hidden
#line 32
    testRunner.When("the operator attempts to create the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
    testRunner.Then("the customer should be added successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table20.AddRow(new string[] {
                            "Ahmad3",
                            "Aghamohammadi3",
                            "ahmad.aghamohammadi@gmail.com",
                            "+12124567890",
                            "1990-08-11",
                            "NL91ABNA0417164300"});
#line 35
    testRunner.Given("a new customer with the following details", ((string)(null)), table20, "Given ");
#line hidden
#line 38
    testRunner.When("the operator attempts to create the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
    testRunner.Then("an error message should be shown indicating \"Email already exists\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table21.AddRow(new string[] {
                            "Ahmad",
                            "Aghamohammadi",
                            "ahmad.aghamohammadi@gmail.com",
                            "+12124567890",
                            "1990-08-23",
                            "NL91ABNA0417164300"});
#line 41
    testRunner.Given("a new customer with the following details", ((string)(null)), table21, "Given ");
#line hidden
#line 44
    testRunner.When("the operator attempts to create the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
    testRunner.Then("an error message should be shown indicating \"Customer with the same name and date" +
                        " of birth already exists\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table22.AddRow(new string[] {
                            "51a9d76c-b28e-4659-aad5-965515e15e16",
                            "Ahmad",
                            "Aghamohammadi",
                            "ahmad.aghamohammadi@gmail.com",
                            "123",
                            "1990-08-23",
                            "NL91ABNA0417164300"});
#line 51
    testRunner.Given("update customer with the following details", ((string)(null)), table22, "Given ");
#line hidden
#line 54
    testRunner.When("the operator attempts to update the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
    testRunner.Then("an error message should be shown indicating \"Invalid phone number\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table23.AddRow(new string[] {
                            "51a9d76c-b28e-4659-aad5-965515e15e16",
                            "Ahmad",
                            "Aghamohammadi",
                            "ahmad.aghamohammadi@gmail.com",
                            "+12124567890",
                            "1990-08-23",
                            "132164555645465"});
#line 57
    testRunner.Given("update customer with the following details", ((string)(null)), table23, "Given ");
#line hidden
#line 60
    testRunner.When("the operator attempts to update the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
    testRunner.Then("an error message should be shown indicating \"Invalid Bank account format\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table24.AddRow(new string[] {
                            "51a9d76c-b28e-4659-aad5-965515e15e16",
                            "Ahmad",
                            "Aghamohammadi",
                            "ahmad.aghamohammadi",
                            "+12124567890",
                            "1990-08-23",
                            "NL91ABNA0417164300"});
#line 63
    testRunner.Given("update customer with the following details", ((string)(null)), table24, "Given ");
#line hidden
#line 66
    testRunner.When("the operator attempts to update the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
    testRunner.Then("an error message should be shown indicating \"Invalid email\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table25.AddRow(new string[] {
                            "51a9d76c-b28e-4659-aad5-965515e15e16",
                            "AhmadEdited",
                            "AghamohammadiEdited",
                            "ahmad.aghamohammadiEdited@gmail.com",
                            "+12124567896",
                            "1990-08-26",
                            "NL91ABNA0417164300"});
#line 68
    testRunner.Given("update customer with the following details", ((string)(null)), table25, "Given ");
#line hidden
#line 71
    testRunner.When("the operator attempts to update the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
    testRunner.Then("the customer should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table26.AddRow(new string[] {
                            "51a9d76c-b28e-4659-aad5-965515e15e16",
                            "AhmadEdited",
                            "AghamohammadiEdited",
                            "ahmad.aghamohammadi2@gmail.com",
                            "+12124567896",
                            "1990-08-26",
                            "NL91ABNA0417164300"});
#line 74
    testRunner.Given("update customer with the following details", ((string)(null)), table26, "Given ");
#line hidden
#line 77
    testRunner.When("the operator attempts to update the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
    testRunner.Then("an error message should be shown indicating \"Email already exists\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table27.AddRow(new string[] {
                            "51a9d76c-b28e-4659-aad5-965515e15e16",
                            "Ahmad2",
                            "Aghamohammadi2",
                            "ahmad2.aghamohammadi44@gmail.com",
                            "+12124567890",
                            "1990-08-24",
                            "NL91ABNA0417164300"});
#line 80
    testRunner.Given("update customer with the following details", ((string)(null)), table27, "Given ");
#line hidden
#line 83
    testRunner.When("the operator attempts to update the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
    testRunner.Then("an error message should be shown indicating \"Customer with the same name and date" +
                        " of birth already exists\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table28.AddRow(new string[] {
                            "51a9d76c-b28e-4659-aad5-965515e15e16",
                            "Ahmad2",
                            "Aghamohammadi2",
                            "ahmad2.aghamohammadi44@gmail.com",
                            "+12124567890",
                            "1990-08-24",
                            "NL91ABNA0417164300"});
#line 86
    testRunner.Given("update customer with the following details", ((string)(null)), table28, "Given ");
#line hidden
#line 89
    testRunner.When("the operator attempts to update the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
    testRunner.Then("an error message should be shown indicating \"Customer with the same name and date" +
                        " of birth already exists\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
    testRunner.When("the operator lists the customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
    testRunner.Then("the customer list should be shown successfully with 2 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
    testRunner.Given("a customer with Id \"51a9d76c-b28e-4659-aad5-965515e15e16\" exists in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
    testRunner.When("the operator deletes the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
    testRunner.When("the operator lists the customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
    testRunner.Then("the customer list should be shown successfully with 1 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
